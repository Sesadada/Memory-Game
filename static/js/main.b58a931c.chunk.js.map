{"version":3,"sources":["components/Tile.js","components/Grid.js","components/Header.js","components/images/images.js","components/Game.js","App.js","index.js"],"names":["Tile","props","found","name","id","onClick","color","useState","newColor","setNewColor","arr","Object","entries","useEffect","some","a","slice","className","Grid","imagesArr","clicking","map","img","Header","isWinning","setIsWinning","setGained","setPlayed","message","setMessage","updateCounter","setIsVisible","setFoundCouples","setCardsArray","played","gained","cardsArray","isVisible","divOne","divTwo","newArr","sort","Math","random","style","Game","counter","setCounter","foundCouples","textContent","prevState","e","target","firstChild","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b58a931c.chunk.js","sourcesContent":["import {useState, useEffect} from 'react'\nconst Tile = (props) => {\n\n    const {found, name, id, onClick, color} = props\n    const [newColor, setNewColor] = useState(color)\n    let arr = found? Object.entries(found): null\n\n    useEffect(() => {\n       if(arr){\n           const final = arr.some(a => a[0].slice(0,-1) === name)\n           final && setNewColor('tileFound')\n        } else {\n            setNewColor(color)\n        }\n    }, [arr, name, color])\n\n    return (\n        <div id={id} name={name} className={newColor} onClick={onClick}> \n           <div  \n             id={id} \n             className='tileHidden'>\n             {name}\n           </div> \n        </div>\n    )\n}\n\nexport default Tile\n","import React from 'react'\nimport Tile from './Tile'\nconst Grid = (props) => {\n   const {imagesArr, clicking, found, color} = props\n    return (\n        <div className='grid'>\n        {\n            imagesArr.map(img => \n            <Tile found={found} \n            color={color} \n            key={img.id} \n            id={img.id} \n            onClick={clicking} \n            name={img.name}/>)\n        }   \n        </div>\n    )\n}\n\nexport default Grid\n","import {useState, useEffect} from 'react'\n\nconst Header = (props) => {\n    const [isWinning, setIsWinning] = useState(false)\n    const {setGained, setPlayed, message, setMessage,\n    updateCounter, setIsVisible, setFoundCouples, setCardsArray, \n    played, gained, cardsArray, isVisible} = props\n    \n    useEffect(()=> {\n        if(gained === 8){\n            setIsWinning(true)\n            setMessage(`You found 8 pairs of cards in ${played} attempts!`)\n            setGained(0)\n            isVisible.divOne.className = 'tileHidden'\n            isVisible.divTwo.className = 'tileHidden'\n          }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    },[gained])\n\n    \n    const playAgain = () => {\n        setGained(0)\n        setPlayed(0)\n        setIsWinning(false)\n        setMessage(null)\n        updateCounter()\n        setIsVisible({\n          divOne: '',\n          divTwo:''\n        })\n        setFoundCouples(null)\n        const newArr = cardsArray.sort(() => (Math.random() > .5) ? 1 : -1)\n        setCardsArray(newArr)\n      }\n\n\n    return (\n        <div>\n          <h1>Memory Game</h1>\n          <p className='explication'>Find the 8 couple of names by uncovering 2 cards at the time</p>\n          <div className={!isWinning? 'tileHidden':'points'}>\n            <p >{message}</p>\n            <button className={isWinning? 'playBtn':'tileHidden'} onClick={playAgain}>Shuffle and play again</button>\n         </div>\n         <div className={isWinning? 'tileHidden':'points'}>\n           <p className='attempts'> Attempts: {played} </p>     \n           <p className='couples'><b style={{color:'#062af8'}}>{message}</b> Couples found: {gained}</p>\n        </div>\n            \n        </div>\n    )\n}\n\nexport default Header\n","\nlet imagesArr = [{id:1, name: \"alicia\"}, {id:2, name:\"serena\"}, {id:3, name: \"mersia\"}, {id: 4, name:\"alba\"}, \n  {id:5, name:\"vanessa\"}, {id:6, name: \"rosely\"}, {id:7, name: \"olivia\"}, {id:8, name: \"veronica\"}, \n  {id:9, name: \"alicia\"}, {id:10, name:\"serena\"}, {id:11, name: \"mersia\"}, {id: 12, name:\"alba\"}, \n  {id:13, name:\"vanessa\"}, {id:14, name: \"rosely\"}, {id:15, name: \"olivia\"}, {id:16, name: \"veronica\"},]\n \n  imagesArr = imagesArr.sort(() => (Math.random() > .5) ? 1 : -1)\n\nexport default imagesArr\n\n\n","import {useState, useEffect} from 'react'\nimport Grid from './Grid'\nimport Header from './Header'\nimport imagesArr from './images/images'\n\nconst Game = () => {\n    const [gained, setGained] = useState(0)\n    const [played, setPlayed] = useState(0)\n    const [cardsArray, setCardsArray] = useState(imagesArr)\n    const [counter, setCounter] = useState(0)\n    const [message, setMessage] = useState(null)\n    const [foundCouples, setFoundCouples] = useState(null)\n    const [isVisible, setIsVisible] = useState({\n        divOne: '',\n        divTwo:''\n      })\n\n    const updateCounter = () => {\n      setCounter(0)\n    }\n  \n    const randomClick = (e) => {\n      setMessage(null)\n      if(counter === 0 || isVisible.divTwo !== '') {\n        if(isVisible.divTwo){\n        isVisible.divOne.className = 'tileHidden'\n        isVisible.divTwo.className = 'tileHidden'\n        setIsVisible({\n          divOne: '',\n          divTwo: ''\n        })\n        updateCounter()\n      }\n        e.target.firstChild.className = 'tileVisible'\n        setCounter(counter+1)\n        setIsVisible(prevState => ({...prevState, divOne: e.target.firstChild\n      }))} else if (counter === 1  && e.target.id !== isVisible.divOne.id){ \n        e.target.firstChild.className = 'tileVisible'\n        setIsVisible(prevState => ({...prevState, divTwo: e.target.firstChild  \n        }))\n        setCounter(0)\n        setPlayed(played + 1)\n  \n    } \n  }   \n  \n  useEffect(() => {\n    if((isVisible.divOne !== '') && isVisible.divOne.textContent === isVisible.divTwo.textContent && isVisible.divOne.id !== isVisible.divTwo.id){\n      setGained(gained + 1)\n      setMessage('You found a couple! ')\n      setFoundCouples(prevState => ({...prevState, [`${isVisible.divOne.textContent}A`]: isVisible.divOne, [`${isVisible.divOne.textContent}B`]: isVisible.divTwo}))\n      isVisible.divOne.className='tileVisibleFound'\n      isVisible.divTwo.className='tileVisibleFound'\n      } \n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isVisible])\n  \n  return (\n      <div className=\"App\">\n      <Header \n      isVisible={isVisible}\n      setGained= {setGained} \n      setPlayed={setPlayed}\n      setMessage={setMessage}\n      updateCounter={updateCounter}\n      setIsVisible={setIsVisible}\n      setFoundCouples={setFoundCouples}\n      setCardsArray={setCardsArray}\n      message={message}\n      played={played}\n      gained={gained}\n      cardsArray={cardsArray}\n      />\n  \n      <div className='gridBox'>\n        <Grid found={foundCouples} clicking={randomClick} imagesArr={cardsArray} color='tile'/>\n      </div>\n      </div>\n    );\n  }\n  export default Game;\n  /*\n      <h1>Memory Game</h1>\n      <div className={!isWinning? 'tileHidden':'points'}>\n      <p >{message}</p>\n      <button className={isWinning? 'playBtn':'tileHidden'} onClick={playAgain}>Shuffle and play again</button>\n      </div>\n      <div className={isWinning? 'tileHidden':'points'}>\n      <p> Attempts: {played} </p>     \n      <p>{message} Couples found: {gained}</p>\n      </div>\n  */\n  \n  /*\n  if(gained === 8){\n    setIsWinning(true)\n    setMessage(`You found 8 pairs of cards in ${played} attempts!`)\n    setGained(0)\n    isVisible.divOne.className = 'tileHidden'\n    isVisible.divTwo.className = 'tileHidden'\n  }\n  \n  const playAgain = () => {\n    setGained(0)\n    setPlayed(0)\n    setIsWinning(false)\n    setMessage(null)\n    updateCounter()\n    setInitialColor('tile')\n    setIsVisible({\n      divOne: '',\n      divTwo:''\n    })\n    setFoundCouples(null)\n    const newArr = cardsArray.sort(() => (Math.random() > .5) ? 1 : -1)\n    setCardsArray(newArr)\n  }\n  */\n","import './App.css';\nimport Game from './components/Game'\n\nconst App = () => {\n  return <Game />\n}\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}